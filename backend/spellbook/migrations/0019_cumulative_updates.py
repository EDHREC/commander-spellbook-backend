# Generated by Django 5.0.4 on 2024-04-20 13:19

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models
from spellbook.models import Ingredient


def migrate_card_features_through(apps, schema_editor):
    FeatureOfCard = apps.get_model('spellbook', 'FeatureOfCard')
    Card = apps.get_model('spellbook', 'Card')
    to_create = []
    for card in Card.objects.prefetch_related('features'):
        for i, feature in enumerate(card.features.all()):
            to_create.append(
                FeatureOfCard(
                    card=card,
                    feature=feature,
                    zone_locations=Ingredient.ZoneLocation.BATTLEFIELD
                )
            )
    FeatureOfCard.objects.bulk_create(to_create)


def reverse_migrate_card_features_through(apps, schema_editor):
    FeatureOfCard = apps.get_model('spellbook', 'FeatureOfCard')
    FeatureOfCardOld = apps.get_model('spellbook', 'Card').features.through
    to_create = []
    for feature_of_card in FeatureOfCard.objects.all():
        to_create.append(FeatureOfCardOld(card_id=feature_of_card.card.id, feature_id=feature_of_card.feature.id))
    for i, obj in enumerate(to_create):
        obj.id = i + 1
        obj.save(force_insert=True)


class Migration(migrations.Migration):

    dependencies = [
        ('spellbook', '0018_cumulative_updates'),
    ]

    operations = [
        migrations.CreateModel(
            name='FeatureOfCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_locations', models.CharField(default='H', help_text='Starting location(s) for the card.', max_length=6, verbose_name='starting location')),
                ('battlefield_card_state', models.CharField(blank=True, help_text='State of the card on the battlefield, if present.', max_length=200, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)')], verbose_name='battlefield starting card state')),
                ('exile_card_state', models.CharField(blank=True, help_text='State of the card in exile, if present.', max_length=200, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)')], verbose_name='exile starting card state')),
                ('graveyard_card_state', models.CharField(blank=True, help_text='State of the card in the graveyard, if present.', max_length=200, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)')], verbose_name='graveyard starting card state')),
                ('library_card_state', models.CharField(blank=True, help_text='State of the card in the library, if present.', max_length=200, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)')], verbose_name='library starting card state')),
                ('must_be_commander', models.BooleanField(default=False, help_text='Does the card have to be a commander?', verbose_name='must be commander')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.card')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.feature')),
            ],
            options={
                'ordering': ['id'],
                'abstract': False,
                'unique_together': {('feature', 'card')},
            },
        ),
        migrations.RunPython(
            code=migrate_card_features_through,
            reverse_code=reverse_migrate_card_features_through,
        ),
        migrations.RemoveField(
            model_name='card',
            name='features',
        ),
        migrations.AddField(
            model_name='card',
            name='features',
            field=models.ManyToManyField(blank=True, help_text='Features provided by this single card effects or characteristics', related_name='cards', through='spellbook.FeatureOfCard', to='spellbook.feature', verbose_name='features of card'),
        ),
        migrations.AlterModelOptions(
            name='variantsuggestion',
            options={'default_manager_name': 'objects', 'ordering': [models.Case(models.When(status='N', then=models.Value(0)), models.When(status='NR', then=models.Value(1)), models.When(status='A', then=models.Value(2)), models.When(status='R', then=models.Value(3)), default=models.Value(10)), 'created'], 'verbose_name': 'variant suggestion', 'verbose_name_plural': 'variant suggestions'},
        ),
    ]
