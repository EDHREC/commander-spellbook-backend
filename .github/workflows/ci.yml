name: CI/CD

on:
  pull_request:
  push:
    branches:
      - "**"
    tags:
      - "*"
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:


defaults:
  run:
    shell: bash

permissions: {}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ci_build_secret_key
    outputs:
      version: ${{ steps.semver.outputs.version }}
      should-release: ${{ steps.semver.outputs.should-release }}
      is-prerelease: ${{ steps.semver.outputs.is-github-prerelease }}
    steps:
      - name: Setup Docker Buildx 🐳
        uses: docker/setup-buildx-action@v3

      - id: semver
        name: Checkout 🛎️
        uses: EasyDesk/action-semver-checkout@v1

      - name: Build and export image 🏗️
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true
          file: backend/Dockerfile
          tags: spellbook-backend:latest
          target: production
          build-args: VERSION=${{ steps.semver.outputs.version }}
          outputs: type=docker,dest=/tmp/spellbook-backend.tar

      - name: Upload image artifact 📦
        uses: actions/upload-artifact@v4
        with:
          name: spellbook-backend
          path: /tmp/spellbook-backend.tar
      - name: Upload migration artifatcs 📦
        uses: actions/upload-artifact@v4
        with:
          name: spellbook-backend-migrations
          path: backend/.kubernetes/migration


  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.12'
          - '3.11'
          - '3.10'
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Setup Python 🐍
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install Linter 🧴
        run: pip install flake8
      - name: Lint 🧹
        working-directory: backend
        run: flake8 .


  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.12'
          - '3.11'
          - '3.10'
          - 'pypy3.10'
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Setup Python 🐍
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install dependencies 🧶
        run: pip install --no-cache-dir --no-deps tblib $(grep -ivE "#|cryptography|cffi" requirements.txt)
        working-directory: backend
      - name: Print Django version 🐍
        run: python manage.py version
        working-directory: backend
      - name: Unit Test 🧪
        run: python -Wd manage.py test --no-input ${{ !startsWith(matrix.python-version, 'pypy') && '--parallel auto' || '' }}
        working-directory: backend


  integration-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Setup Docker Buildx 🐳
        uses: docker/setup-buildx-action@v3
      - name: Download image artifact ⬇
        uses: actions/download-artifact@v4
        with:
          name: spellbook-backend
          path: /tmp
      - name: Load docker image 🐳
        run: |
          docker load --input /tmp/spellbook-backend.tar
          docker image ls -a
      - name: Docker compose up 🧫
        run: docker compose -f docker-compose.yml up -d --no-build
      - name: Unit test inside container 🧪
        run: docker exec -e CI=true -i backend-web-1 python manage.py test --no-input --parallel auto --settings=backend.production_settings


  release:
    runs-on: ubuntu-latest
    needs: [build, lint, test, integration-test, client-python, bot-discord]
    if: needs.build.outputs.should-release == 'true'
    concurrency: release
    permissions:
      contents: write
    steps:
      - name: Download image artifact ⬇
        uses: actions/download-artifact@v4
        with:
          name: spellbook-backend
          path: release
      - name: Release 📧
        uses: EasyDesk/action-semver-release@v1
        with:
          version: ${{ needs.build.outputs.version }}
          prerelease: ${{ needs.build.outputs.is-prerelease }}
          prefix: CSB
          files: |
            release/*


  deploy:
    runs-on: ubuntu-latest
    needs: [build, release]
    concurrency:
      group: production
      cancel-in-progress: false
    environment: scm-production
    permissions:
      id-token: write
    env:
      KUBECTL_TIMEOUT: 1800
    steps:
      - name: SetupDocker Buildx 🐳
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials 🛠
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::083767677168:role/spellbook-deploy
          role-session-name: github-actions
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR 📦
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
      - name: Download image artifact ⬇
        uses: actions/download-artifact@v4
        with:
          name: spellbook-backend
          path: /tmp
      - name: Load image from artifact 🐳
        run: |
          docker load --input /tmp/spellbook-backend.tar
          docker image ls -a
      - name: Push versioned image to Amazon ECR 📦
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ needs.build.outputs.version }}
        run: |
          docker tag spellbook-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Download migration artifacts ⬇
        id: migration-artifacts
        uses: actions/download-artifact@v4
        with:
          name: spellbook-backend-migrations
          path: /tmp/migrations
      - name: Configure kubernetes 🐙
        working-directory: ${{ steps.migration-artifacts.outputs.download-path }}
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name spellbook-prod-cluster --kubeconfig spellbookkubeconfig.yaml
      - name: Install and configure kubectl 🐙
        uses: azure/setup-kubectl@v4
      - name: Setup Kustomize 🛠
        uses: imranismail/setup-kustomize@v2
      - name: Run Kustomize to set image to sha 🛠
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ needs.build.outputs.version }}
        working-directory: ${{ steps.migration-artifacts.outputs.download-path }}
        run: |
          kustomize edit set image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Run migrations 🚶‍♂️
        working-directory: ${{ steps.migration-artifacts.outputs.download-path }}
        run: |
          export KUBECONFIG=spellbookkubeconfig.yaml
          kubectl delete job spellbook-migration -n spellbook || true
          kubectl apply -k .
          kubectl wait --timeout=${KUBECTL_TIMEOUT}s --for=condition=complete job/spellbook-migration -n spellbook &
          completion_pid=$!
          kubectl wait --timeout=${KUBECTL_TIMEOUT}s --for=condition=failed job/spellbook-migration -n spellbook && exit 1 &
          failure_pid=$!
          exit_code=0
          if wait -n $completion_pid $failure_pid; then
            echo "Job completed successfully"
          else
            echo "Job failed"
            exit_code=1
          fi
          echo "Job logs:"
          kubectl logs job/spellbook-migration -n spellbook
          echo "Deleting job..."
          kubectl delete job/spellbook-migration -n spellbook
          exit $exit_code
      - name: Push image to Amazon ECR 📦
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker tag spellbook-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Rollout pods 🚀
        working-directory: ${{ steps.migration-artifacts.outputs.download-path }}
        run: |
          export KUBECONFIG=spellbookkubeconfig.yaml
          kubectl rollout restart deployment/spellbook-api -n spellbook
          timeout ${KUBECTL_TIMEOUT} kubectl rollout status deployment/spellbook-api -n spellbook


  open-api:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        shell: bash
        working-directory: client
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Install spectacular dependencies 🧶
        run: pip install --no-cache-dir --no-deps -r requirements.txt
        working-directory: backend
      - name: Chmod scripts 👑
        run: chmod +x *.sh
      - name: Generate OpenApi 🧬
        run: ./generate-openapi.sh
      - name: Upload OpenApi artifact 📦
        uses: actions/upload-artifact@v4
        with:
          name: spellbook-openapi
          path: client/openapi.*
          if-no-files-found: error


  client-python:
    runs-on: ubuntu-latest
    needs: open-api
    defaults:
      run:
        shell: bash
        working-directory: client
    steps:
      - name: Setup Kiota 🧱
        uses: microsoft/setup-kiota@v0.5.0
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Chmod scripts 👑
        run: chmod +x *.sh
      - name: Download OpenApi artifact ⬇
        uses: actions/download-artifact@v4
        with:
          name: spellbook-openapi
          path: client
      - name: Genrate client with Kiota 🏗️
        run: ./generate-client.sh
      - name: Install client dependencies 🧶
        # It is important to not use --no-deps here, otherwise httpcore will raise an error during the tests
        run: pip install --no-cache-dir -r requirements.txt
        working-directory: client/python
      - name: Install test dependencies 🧶
        run: pip install --no-cache-dir --no-deps -r requirements.txt
        working-directory: backend
      - name: Run python tests 🧪
        run: python backend/manage.py test client/python/tests/ --no-input --parallel auto
        working-directory: .

  bot-discord:
    runs-on: ubuntu-latest
    needs: [client-python]
    defaults:
      run:
        shell: bash
        working-directory: bot/discord
    steps:
      - name: Setup Docker Buildx 🐳
        uses: docker/setup-buildx-action@v3
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Install dependencies 🧶
        run: pip install --no-cache-dir --no-deps -r requirements.txt
      - name: Build and export image 🏗️
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true
          file: bot/discord/Dockerfile
          tags: spellbook-discord-bot:latest
          outputs: type=docker,dest=/tmp/spellbook-discord-bot.tar
