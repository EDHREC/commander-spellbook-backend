name: CI/CD

on:
  push:
    branches:
      - "**"
    tags:
      - "*"
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      SECRET_KEY: ci_build_secret
      DB_USER: ci_build_user
      DB_PASSWORD: ci_build_password
    outputs:
      version: ${{ steps.semver.outputs.version }}
      should-release: ${{ steps.semver.outputs.should-release }}
      is-prerelease: ${{ steps.semver.outputs.is-github-prerelease }}
    steps:
      - id: semver
        name: Checkout
        uses: EasyDesk/action-semver-checkout@v1
      - run: docker compose -f docker-compose.yml build
        working-directory: backend
  release:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.should-release == 'true'
    concurrency: release
    steps:
      - name: Release
        uses: EasyDesk/action-semver-release@v1
        with:
          version: ${{ needs.build.outputs.version }}
          prerelease: ${{ needs.build.outputs.is-prerelease }}
          prefix: CSB
  deploy:
    runs-on: ubuntu-latest
    needs: release
    concurrency: deploy
    environment: production
    env:
      SECRET_KEY: ${{ secrets.ENV_SECRET_KEY }}
      DB_USER: ${{ secrets.ENV_DB_USER }}
      DB_PASSWORD: ${{ secrets.ENV_DB_PASSWORD }}
      SSL_CERTIFICATE_PATH: ${{ secrets.ENV_SSL_CERTIFICATE_PATH }}
      SSL_PRIVATEKEY_PATH: ${{ secrets.ENV_SSL_PRIVATEKEY_PATH }}
      AWS_S3_ACCESS_KEY_ID: ${{ secrets.ENV_AWS_S3_ACCESS_KEY_ID }}
      AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.ENV_AWS_S3_SECRET_ACCESS_KEY }}
      AWS_S3_REGION: ${{ secrets.ENV_AWS_S3_REGION }}
      AWS_S3_BUCKET: ${{ secrets.ENV_AWS_S3_BUCKET }}
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Docker context for production
        run: |
          docker context create production --docker 'host=ssh://${{ secrets.USERNAME }}@${{ secrets.HOST }}'
          docker context use production
      - name: Setup ssh credentials for user
        run: |
          eval `ssh-agent -s`
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
          echo '${{ secrets.SSH_KEY }}' | tr -d '\r' | ssh-add -
      - name: Setup ssh credentials for server
        run: echo '${{ secrets.HOST }} ${{ secrets.SSH_SERVER_CERT }}' >> "$HOME/.ssh/known_hosts"
      - name: Build Docker images on remote host
        run: docker --context production compose -f docker-compose.yml -f docker-compose.ssl.yml -f docker-compose.aws.yml build
      - name: Start Docker containers on remote host
        run: docker --context production compose -f docker-compose.yml -f docker-compose.ssl.yml -f docker-compose.aws.yml up -d
      - name: Check if containers are running
        run: docker --context production ps
