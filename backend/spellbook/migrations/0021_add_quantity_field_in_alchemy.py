# Generated by Django 5.0.4 on 2024-05-03 13:26

import django.db.models.deletion
import django.core.validators
from django.db import migrations, models
from spellbook.serializers import VariantSerializer


def migrate_variant_produces_through(apps, schema_editor):
    FeatureProducedByVariant = apps.get_model('spellbook', 'FeatureProducedByVariant')
    Variant = apps.get_model('spellbook', 'Variant')
    to_create = []
    for variant in Variant.objects.prefetch_related('produces'):
        for feature in variant.produces.all():
            to_create.append(
                FeatureProducedByVariant(
                    variant=variant,
                    feature=feature,
                    quantity=1,
                )
            )
    FeatureProducedByVariant.objects.bulk_create(to_create)


def reverse_migrate_variant_produces_through(apps, schema_editor):
    FeatureProducedByVariant = apps.get_model('spellbook', 'FeatureProducedByVariant')
    FeatureProducedByVariantOld = apps.get_model('spellbook', 'Variant').produces.through
    to_create = []
    for feature_produced_by_variant in FeatureProducedByVariant.objects.all():
        to_create.append(FeatureProducedByVariantOld(
            variant_id=feature_produced_by_variant.variant_id,
            feature_id=feature_produced_by_variant.feature_id,
        ))
    for i, obj in enumerate(to_create):
        obj.id = i + 1
        obj.save(force_insert=True)


def migrate_combo_produces_through(apps, schema_editor):
    FeatureProducedInCombo = apps.get_model('spellbook', 'FeatureProducedInCombo')
    Combo = apps.get_model('spellbook', 'Combo')
    to_create = []
    for combo in Combo.objects.prefetch_related('produces'):
        for feature in combo.produces.all():
            to_create.append(
                FeatureProducedInCombo(
                    combo=combo,
                    feature=feature,
                    quantity=1,
                )
            )
    FeatureProducedInCombo.objects.bulk_create(to_create)


def reverse_migrate_combo_produces_through(apps, schema_editor):
    FeatureProducedInCombo = apps.get_model('spellbook', 'FeatureProducedInCombo')
    FeatureProducedInComboOld = apps.get_model('spellbook', 'Combo').produces.through
    to_create = []
    for feature_produced_in_combo in FeatureProducedInCombo.objects.all():
        to_create.append(FeatureProducedInComboOld(
            combo_id=feature_produced_in_combo.combo_id,
            feature_id=feature_produced_in_combo.feature_id,
        ))
    for i, obj in enumerate(to_create):
        obj.id = i + 1
        obj.save(force_insert=True)


def migrate_feature_removed_in_combo_through(apps, schema_editor):
    FeatureRemovedInCombo = apps.get_model('spellbook', 'FeatureRemovedInCombo')
    Combo = apps.get_model('spellbook', 'Combo')
    to_create = []
    for combo in Combo.objects.prefetch_related('removes'):
        for feature in combo.removes.all():
            to_create.append(
                FeatureRemovedInCombo(
                    combo=combo,
                    feature=feature,
                    quantity=1,
                )
            )
    FeatureRemovedInCombo.objects.bulk_create(to_create)


def reverse_migrate_feature_removed_in_combo_through(apps, schema_editor):
    FeatureRemovedInCombo = apps.get_model('spellbook', 'FeatureRemovedInCombo')
    FeatureRemovedInComboOld = apps.get_model('spellbook', 'Combo').removes.through
    to_create = []
    for feature_removed_in_combo in FeatureRemovedInCombo.objects.all():
        to_create.append(FeatureRemovedInComboOld(
            combo_id=feature_removed_in_combo.combo_id,
            feature_id=feature_removed_in_combo.feature_id,
        ))
    for i, obj in enumerate(to_create):
        obj.id = i + 1
        obj.save(force_insert=True)


def update_serialized_representation(apps, schema_editor):
    Variant = apps.get_model('spellbook', 'Variant')
    FeatureProducedByVariant = apps.get_model('spellbook', 'FeatureProducedByVariant')
    variants_source = list(Variant.objects
        .prefetch_related(
            'cardinvariant_set',
            'templateinvariant_set',
            models.Prefetch(
                'featureproducedbyvariant_set',
                queryset=FeatureProducedByVariant.objects
                .select_related('feature')
                .filter(feature__utility=False),
            ),
            'cardinvariant_set__card',
            'templateinvariant_set__template',
            'of',
            'includes',
        )
    )
    for variant in variants_source:
        variant.pre_save = lambda: None
        variant.serialized = VariantSerializer(variant).data  # type: ignore
    Variant.objects.bulk_update(objs=variants_source, fields=['serialized'], batch_size=5000)  # type: ignore


class Migration(migrations.Migration):

    dependencies = [
        ('spellbook', '0020_cardusedinvariantsuggestion_card_unaccented_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='cardincombo',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='cardinvariant',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='cardusedinvariantsuggestion',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='featureneededincombo',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the feature needed in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='featureofcard',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='templateincombo',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='templateinvariant',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.AddField(
            model_name='templaterequiredinvariantsuggestion',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
        migrations.CreateModel(
            name='FeatureProducedByVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1, help_text='Quantity of the feature produced by the variant.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.feature')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.variant')),
            ],
            options={
                'unique_together': {('feature', 'variant')},
            },
        ),
        migrations.RunPython(
            code=migrate_variant_produces_through,
            reverse_code=reverse_migrate_variant_produces_through,
        ),
        migrations.RemoveField(
            model_name='variant',
            name='produces',
        ),
        migrations.AddField(
            model_name='variant',
            name='produces',
            field=models.ManyToManyField(editable=False, help_text='Features that this variant produces', related_name='produced_by_variants', through='spellbook.FeatureProducedByVariant', to='spellbook.feature'),
        ),
        migrations.CreateModel(
            name='FeatureProducedInCombo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1, help_text='Quantity of the feature produced in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity')),
                ('combo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.combo')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.feature')),
            ],
            options={
                'unique_together': {('feature', 'combo')},
            },
        ),
        migrations.RunPython(
            code=migrate_combo_produces_through,
            reverse_code=reverse_migrate_combo_produces_through,
        ),
        migrations.RemoveField(
            model_name='combo',
            name='produces',
        ),
        migrations.AddField(
            model_name='combo',
            name='produces',
            field=models.ManyToManyField(help_text='Features that this combo produces', related_name='produced_by_combos', through='spellbook.FeatureProducedInCombo', to='spellbook.feature', verbose_name='produced features'),
        ),
        migrations.CreateModel(
            name='FeatureRemovedInCombo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1, help_text='Quantity of the feature removed in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity')),
                ('combo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.combo')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.feature')),
            ],
            options={
                'unique_together': {('feature', 'combo')},
            },
        ),
        migrations.RunPython(
            code=migrate_feature_removed_in_combo_through,
            reverse_code=reverse_migrate_feature_removed_in_combo_through,
        ),
        migrations.RemoveField(
            model_name='combo',
            name='removes',
        ),
        migrations.AddField(
            model_name='combo',
            name='removes',
            field=models.ManyToManyField(blank=True, help_text='Features that this combo removes', related_name='removed_by_combos', through='spellbook.FeatureRemovedInCombo', to='spellbook.feature', verbose_name='removed features'),
        ),
        migrations.RunPython(
            code=update_serialized_representation,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
