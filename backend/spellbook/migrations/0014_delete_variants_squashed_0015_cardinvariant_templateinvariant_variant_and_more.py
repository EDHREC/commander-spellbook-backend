# Generated by Django 4.1.5 on 2023-03-10 10:39

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import sortedm2m.fields
import spellbook.models


class Migration(migrations.Migration):

    replaces = [('spellbook', '0014_delete_variants'), ('spellbook', '0015_cardinvariant_templateinvariant_variant_and_more')]

    dependencies = [
        ('spellbook', '0013_alter_cardincombo_zone_location_and_more'),
    ]

    operations = [
        migrations.DeleteModel(
            name='CardInVariant',
        ),
        migrations.DeleteModel(
            name='TemplateInVariant',
        ),
        migrations.DeleteModel(
            name='Variant',
        ),
        migrations.CreateModel(
            name='CardInVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(help_text='Order of the card in the combo.', verbose_name='order')),
                ('zone_location', models.CharField(choices=[('H', 'Hand'), ('B', 'Battlefield'), ('C', 'Command Zone'), ('G', 'Graveyard'), ('L', 'Library'), ('E', 'Exile'), ('A', 'Any')], default='H', help_text='Starting location for the card.', max_length=2, verbose_name='starting location')),
                ('card_state', models.CharField(blank=True, default='', help_text='State of the card in its starting location.', max_length=200, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:[0-9WUBRGCPXYZSTQEA½∞]|PW|CHAOS|TK|[1-9][0-9]{1,2}|H[WUBRG]|(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?)\\})*[^\\{]*$')], verbose_name='starting card state')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.card')),
            ],
            options={
                'ordering': ['order', 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TemplateInVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(help_text='Order of the card in the combo.', verbose_name='order')),
                ('zone_location', models.CharField(choices=[('H', 'Hand'), ('B', 'Battlefield'), ('C', 'Command Zone'), ('G', 'Graveyard'), ('L', 'Library'), ('E', 'Exile'), ('A', 'Any')], default='H', help_text='Starting location for the card.', max_length=2, verbose_name='starting location')),
                ('card_state', models.CharField(blank=True, default='', help_text='State of the card in its starting location.', max_length=200, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:[0-9WUBRGCPXYZSTQEA½∞]|PW|CHAOS|TK|[1-9][0-9]{1,2}|H[WUBRG]|(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?)\\})*[^\\{]*$')], verbose_name='starting card state')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.template')),
            ],
            options={
                'ordering': ['order', 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.CharField(editable=False, help_text='Unique ID for this variant', max_length=128, primary_key=True, serialize=False, unique=True)),
                ('status', models.CharField(choices=[('N', 'New'), ('D', 'Draft'), ('NW', 'Not Working'), ('OK', 'Ok'), ('R', 'Restore')], default='N', help_text='Variant status for editors', max_length=2)),
                ('mana_needed', models.CharField(blank=True, default='', help_text='Mana needed for this combo. Use the {1}{W}{U}{B}{R}{G}{B/P}... format.', max_length=200, validators=[django.core.validators.RegexValidator(message='Mana needed must be in the {1}{W}{U}{B}{R}{G}{B/P}... format.', regex='^(\\{(?:[0-9WUBRGCPXYZS∞]|[1-9][0-9]{1,2}|(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?)\\} *)*$')])),
                ('other_prerequisites', models.TextField(blank=True, default='', help_text='Other prerequisites for this variant.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:[0-9WUBRGCPXYZSTQEA½∞]|PW|CHAOS|TK|[1-9][0-9]{1,2}|H[WUBRG]|(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?)\\})*[^\\{]*$')])),
                ('description', models.TextField(blank=True, help_text='Long description, in steps', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:[0-9WUBRGCPXYZSTQEA½∞]|PW|CHAOS|TK|[1-9][0-9]{1,2}|H[WUBRG]|(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?)\\})*[^\\{]*$')])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('frozen', models.BooleanField(default=False, help_text='Is this variant undeletable?', verbose_name='is frozen')),
                ('legal', models.BooleanField(default=True, help_text='Is this variant legal in Commander?', verbose_name='is legal')),
                ('identity', models.CharField(blank=True, editable=False, help_text='Mana identity', max_length=5, validators=[django.core.validators.RegexValidator(message='Can be any combination of zero or more letters in [W,U,B,R,G], in order.', regex='^W?U?B?R?G?$')], verbose_name='mana identity')),
                ('generated_by', models.ForeignKey(blank=True, editable=False, help_text='Job that generated this variant', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variants', to='spellbook.job')),
                ('includes', models.ManyToManyField(editable=False, help_text='Combo that this variant includes', related_name='included_in_variants', to='spellbook.combo')),
                ('of', models.ManyToManyField(editable=False, help_text='Combo that this variant is an instance of', related_name='variants', to='spellbook.combo')),
                ('produces', sortedm2m.fields.SortedManyToManyField(editable=False, help_text='Features that this variant produces', related_name='produced_by_variants', to='spellbook.feature')),
                ('requires', models.ManyToManyField(blank=True, help_text='Templates that this variant requires', related_name='required_by_variants', through='spellbook.TemplateInVariant', to='spellbook.template', verbose_name='required templates')),
                ('uses', models.ManyToManyField(editable=False, help_text='Cards that this variant uses', related_name='used_in_variants', through='spellbook.CardInVariant', to='spellbook.card')),
            ],
            options={
                'verbose_name': 'variant',
                'verbose_name_plural': 'variants',
                'ordering': ['-status', '-created'],
            },
            bases=(models.Model, spellbook.models.ScryfallLinkMixin),
        ),
        migrations.AddField(
            model_name='templateinvariant',
            name='variant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.variant'),
        ),
        migrations.AddField(
            model_name='cardinvariant',
            name='variant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spellbook.variant'),
        ),
        migrations.AddIndex(
            model_name='variant',
            index=models.Index(fields=['id'], name='unique_variant_index'),
        ),
        migrations.AlterUniqueTogether(
            name='templateinvariant',
            unique_together={('template', 'variant')},
        ),
        migrations.AlterUniqueTogether(
            name='cardinvariant',
            unique_together={('card', 'variant')},
        ),
    ]
