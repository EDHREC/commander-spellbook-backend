from itertools import combinations_with_replacement
from django.test import TestCase
from spellbook.models.validators import *

class TestValidators(TestCase):
    def test_mana_symbol(self):
        regex = f'^{MANA_SYMBOL}$'
        self.assertRegexpMatches('W', regex)
        self.assertRegexpMatches('U', regex)
        self.assertRegexpMatches('B', regex)
        self.assertRegexpMatches('R', regex)
        self.assertRegexpMatches('G', regex)
        self.assertRegexpMatches('C', regex)
        self.assertRegexpMatches('P', regex)
        self.assertRegexpMatches('W/P', regex)
        self.assertRegexpMatches('U/P', regex)
        self.assertRegexpMatches('B/P', regex)
        self.assertRegexpMatches('R/P', regex)
        self.assertRegexpMatches('G/P', regex)
        self.assertRegexpMatches('W/U', regex)
        self.assertRegexpMatches('W/B', regex)
        self.assertRegexpMatches('U/B', regex)
        self.assertRegexpMatches('U/R', regex)
        self.assertRegexpMatches('B/R', regex)
        self.assertRegexpMatches('B/G', regex)
        self.assertRegexpMatches('R/G', regex)
        self.assertRegexpMatches('0', regex)
        self.assertRegexpMatches('1', regex)
        self.assertRegexpMatches('2', regex)
        self.assertRegexpMatches('3', regex)
        self.assertRegexpMatches('4', regex)
        self.assertRegexpMatches('5', regex)
        self.assertRegexpMatches('16', regex)
        self.assertRegexpMatches('X', regex)
        self.assertRegexpMatches('Y', regex)
        self.assertRegexpMatches('Z', regex)
        self.assertRegexpMatches('S', regex)
        self.assertRegexpMatches('W/U/P', regex)
        self.assertRegexpMatches('W/B/P', regex)
        self.assertRegexpMatches('U/B/P', regex)
        self.assertRegexpMatches('U/R/P', regex)
        self.assertRegexpMatches('B/R/P', regex)
        self.assertRegexpMatches('B/G/P', regex)
        self.assertRegexpMatches('R/G/P', regex)
        self.assertNotRegexpMatches('R/G/P}', regex)
        self.assertNotRegexpMatches('{R/G/P}', regex)
        self.assertNotRegexpMatches('R/G/P{', regex)
        self.assertNotRegexpMatches('J', regex)
        self.assertNotRegexpMatches('T', regex)
        self.assertNotRegexpMatches('Q', regex)
        self.assertNotRegexpMatches('G/B', regex)
        self.assertNotRegexpMatches('-1', regex)

    def test_mana_regex(self):
        self.assertRegexpMatches('{W}', MANA_REGEX)
        self.assertRegexpMatches('{U}', MANA_REGEX)
        self.assertRegexpMatches('{B}', MANA_REGEX)
        self.assertRegexpMatches('{R}', MANA_REGEX)
        self.assertRegexpMatches('{G}', MANA_REGEX)
        self.assertRegexpMatches('{C}', MANA_REGEX)
        self.assertRegexpMatches('{P}{2}{P}', MANA_REGEX)
        self.assertRegexpMatches('{W/P}', MANA_REGEX)
        self.assertRegexpMatches('{U/P}', MANA_REGEX)
        self.assertRegexpMatches('{B/P}', MANA_REGEX)
        self.assertRegexpMatches('{R/P}', MANA_REGEX)
        self.assertRegexpMatches('{G/P}', MANA_REGEX)
        self.assertRegexpMatches('{W/U}', MANA_REGEX)
        self.assertRegexpMatches('{W/B}', MANA_REGEX)
        self.assertRegexpMatches('{U/B}', MANA_REGEX)
        self.assertRegexpMatches('{U/R}', MANA_REGEX)
        self.assertRegexpMatches('{B/R}', MANA_REGEX)
        self.assertRegexpMatches('{B/G}', MANA_REGEX)
        self.assertRegexpMatches('{R/G}', MANA_REGEX)
        self.assertRegexpMatches('{0}', MANA_REGEX)
        self.assertRegexpMatches('{1}', MANA_REGEX)
        self.assertRegexpMatches('{2}', MANA_REGEX)
        self.assertRegexpMatches('{3}', MANA_REGEX)
        self.assertRegexpMatches('{4}', MANA_REGEX)
        self.assertRegexpMatches('{5}', MANA_REGEX)
        self.assertRegexpMatches('{16}', MANA_REGEX)
        self.assertRegexpMatches('{X}', MANA_REGEX)
        self.assertRegexpMatches('{Y}', MANA_REGEX)
        self.assertRegexpMatches('{Z}', MANA_REGEX)
        self.assertRegexpMatches('{S}', MANA_REGEX)
        self.assertRegexpMatches('{W/U/P}', MANA_REGEX)
        self.assertRegexpMatches('{W/B/P}', MANA_REGEX)
        self.assertRegexpMatches('{U/B/P}', MANA_REGEX)
        self.assertRegexpMatches('{U/R/P}', MANA_REGEX)
        self.assertRegexpMatches('{B/R/P}', MANA_REGEX)
        self.assertRegexpMatches('{B/G/P}', MANA_REGEX)
        self.assertRegexpMatches('{R/G/P}{W}', MANA_REGEX)
        self.assertRegexpMatches('{R/G/P}{C} and {W}', MANA_REGEX)
        self.assertRegexpMatches('{W}{W}{U}{U} each turn.', MANA_REGEX)
        self.assertNotRegexpMatches('[R/G/P]', MANA_REGEX)
        self.assertNotRegexpMatches('{R} and }U}', MANA_REGEX)

    def test_double_square_bracket_text(self):
        self.assertRegexpMatches('[[Black Lotus]]', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)
        self.assertRegexpMatches('[[random]] and [[stuff]]', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)
        self.assertRegexpMatches('[[random]] and [[stuff]] and [[more stuff]]', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)
        self.assertRegexpMatches('[[random]] and [[stuff]] and [[more stuff]] and [[even more stuff]]', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)
        self.assertRegexpMatches('[ [ any single square bracket is fine ] anyway ] []', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)
        self.assertRegexpMatches('[[[ triple square brackets are ] fine too ]]]', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)
        self.assertNotRegexpMatches('[[]]', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)
        self.assertNotRegexpMatches('[[', DOUBLE_SQUARE_BRACKET_TEXT_REGEX)


    def test_oracle_symbol(self):
        regex = f'^{ORACLE_SYMBOL}$'
        self.assertRegexpMatches('T', regex)
        self.assertRegexpMatches('Q', regex)
        self.assertRegexpMatches('E', regex)
        self.assertRegexpMatches('A', regex)
        self.assertRegexpMatches('½', regex)
        self.assertRegexpMatches('CHAOS', regex)
        self.assertRegexpMatches('∞', regex)
        for i in range(100):
            self.assertRegexpMatches(str(i), regex)
        for x in 'WUBRG':
            self.assertRegexpMatches(x, regex)
            self.assertRegexpMatches(f'H{x}', regex)
            self.assertRegexpMatches(f'2/{x}', regex)
        self.assertRegexpMatches('C', regex)
        self.assertRegexpMatches('P', regex)
        self.assertRegexpMatches('X', regex)
        self.assertRegexpMatches('Y', regex)
        self.assertRegexpMatches('Z', regex)
        self.assertRegexpMatches('S', regex)
        self.assertRegexpMatches('W/U', regex)
        self.assertRegexpMatches('W/B', regex)
        self.assertRegexpMatches('U/B', regex)
        self.assertRegexpMatches('U/R', regex)
        self.assertRegexpMatches('B/R/P', regex)
        self.assertRegexpMatches('B/G', regex)
        self.assertRegexpMatches('R/G', regex)
        self.assertRegexpMatches('R/G/P', regex)
        self.assertRegexpMatches('W/U/P', regex)
        self.assertNotRegexpMatches('W/U/P/', regex)
        self.assertNotRegexpMatches('W/U/P/P', regex)
        self.assertNotRegexpMatches('U/W', regex)
        self.assertNotRegexpMatches('WU', regex)
        self.assertNotRegexpMatches('WU/P', regex)
        self.assertNotRegexpMatches('J', regex)


    def test_symbols_text(self):
        self.assertRegexpMatches('{T}: Add {W}{U}{B}{R}{G}.', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{T}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{Q}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{E}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{A}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{½}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{CHAOS}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{∞}', SYMBOLS_TEXT_REGEX)
        for i in range(100):
            self.assertRegexpMatches(f'{{{i}}}', SYMBOLS_TEXT_REGEX)
        for x in 'WUBRG':
            self.assertRegexpMatches(f'{{{x}}}', SYMBOLS_TEXT_REGEX)
            self.assertRegexpMatches(f'{{H{x}}}', SYMBOLS_TEXT_REGEX)
            self.assertRegexpMatches(f'{{2/{x}}}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{C} {P} {X} anything {X}{Y}{Z}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{W/U} {W/B} {U/B} {U/R} {B/R/P} {B/G} {R/G} {R/G/P} {W/U/P}', SYMBOLS_TEXT_REGEX)
        self.assertRegexpMatches('{W/U/P} {W/B/P} {U/B/P} {U/R/P} {B/R/P} {B/G/P} {R/G/P} {R/G/P}{W}', SYMBOLS_TEXT_REGEX)
        self.assertNotRegexpMatches('{W/U/P/}', SYMBOLS_TEXT_REGEX)
        self.assertNotRegexpMatches('{W/U/P{}', SYMBOLS_TEXT_REGEX)

    def test_identity(self):
        self.assertNotRegexpMatches('WUBGR', IDENTITY_REGEX)
        for x in range(0b100000):
            if x == 0:
                identity = 'C'
            else:
                identity = ''.join([c for i, c in enumerate('WUBRG') if x & (1 << i)])
            self.assertRegexpMatches(identity, IDENTITY_REGEX)
            if len(identity) > 1:
                self.assertNotRegexpMatches(identity[::-1], IDENTITY_REGEX)


    def test_scryfall_query(self):
        self.assertRegexpMatches('c:rg', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('color>=uw -c:red', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('id<=esper t:instant', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('id:c t:land', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('t:merfolk t:legend', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('t:goblin -t:creature', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('mana:{G}{U}', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('m:{2}{W}{W}', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('m>{3}{W}{U}', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('m:{R/P}', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('c:u mv=5', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('devotion:{U/B}{U/B}{U/B}', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('produces=wu', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('pow>=8', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('pow>tou c:w t:creature', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('t:planeswalker loy=3', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('is:meld', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('is:split', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('c>=br is:spell', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('is:permanent t:rebel', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('is:vanilla', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('t:fish or t:bird', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('t:land (c:wu or pow<6)', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('t:legendary (t:goblin or t:elf)', SCRYFALL_QUERY_REGEX)
        self.assertRegexpMatches('pt>9 (mv<6 or pow>6 or tou>6)', SCRYFALL_QUERY_REGEX)
        self.assertNotRegexpMatches('asd', SCRYFALL_QUERY_REGEX)
        self.assertNotRegexpMatches('c:rg ', SCRYFALL_QUERY_REGEX)
        self.assertNotRegexpMatches('kek:stuff', SCRYFALL_QUERY_REGEX)
        self.assertNotRegexpMatches('--t:card', SCRYFALL_QUERY_REGEX)
        self.assertNotRegexpMatches('t:card or and t:card', SCRYFALL_QUERY_REGEX)
