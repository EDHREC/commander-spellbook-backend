name: CI/CD

on:
  push:
    branches:
      - "**"
    tags:
      - "*"
  workflow_dispatch:


defaults:
  run:
    shell: bash


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ci_build_secret_key
    outputs:
      version: ${{ steps.semver.outputs.version }}
      should-release: ${{ steps.semver.outputs.should-release }}
      is-prerelease: ${{ steps.semver.outputs.is-github-prerelease }}
    steps:
      - id: semver
        name: Checkout 🛎️
        uses: EasyDesk/action-semver-checkout@v1

      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies 🧶
        run: pip install -r requirements.txt
        working-directory: backend
      - name: Print Django version 🐍
        run: python manage.py version
        working-directory: backend

      - name: Setup Docker Buildx 🐳
        uses: docker/setup-buildx-action@v2

      - name: Build and export image 🏗️
        uses: docker/build-push-action@v4
        with:
          push: false
          load: true
          context: backend
          tags: spellbook-backend:latest
          target: production
          outputs: type=docker,dest=/tmp/spellbook-backend.tar
      - name: Upload image artifact 📦
        uses: actions/upload-artifact@v3
        with:
          name: spellbook-backend
          path: /tmp/spellbook-backend.tar


  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Linter 🧴
        run: pip install flake8
      - name: Lint 🧹
        working-directory: backend
        run: flake8 --ignore=E501,F401,E128,W601 .


  test:
    strategy:
      matrix:
        python-version:
          - '3.11'
          - '3.10'
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
      max-parallel: 2
    runs-on: ${{ matrix.os }}
    needs: build
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies 🧶
        run: pip install -r requirements.txt
        working-directory: backend
      - name: Unit Test 🧪
        run: python manage.py test --no-input --parallel auto
        working-directory: backend


  test-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      - name: Setup Docker Buildx 🐳
        uses: docker/setup-buildx-action@v2
      - name: Download image artifact ⬇
        uses: actions/download-artifact@v3
        with:
          name: spellbook-backend
          path: /tmp
      - name: Load docker image 🐳
        run: |
          docker load --input /tmp/spellbook-backend.tar
          docker image ls -a
      - name: Docker compose up 🧫
        run: docker-compose -f docker-compose.yml up -d --no-build
        working-directory: backend
      - name: Unit test inside container 🧪
        run: docker exec -i backend_web_1 python manage.py test --no-input --parallel auto


  release:
    runs-on: ubuntu-latest
    needs: [build, lint, test, test-image]
    if: needs.build.outputs.should-release == 'true'
    concurrency: release
    steps:
      - name: Release 📧
        uses: EasyDesk/action-semver-release@v1
        with:
          version: ${{ needs.build.outputs.version }}
          prerelease: ${{ needs.build.outputs.is-prerelease }}
          prefix: CSB


  delivery-production:
    runs-on: ubuntu-latest
    needs: [build, release]
    concurrency: production
    environment: scm-production
    steps:
      - name: SetupDocker Buildx 🐳
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials 🛠
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR 📦
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download image artifact ⬇
        uses: actions/download-artifact@v3
        with:
          name: spellbook-backend
          path: /tmp

      - name: Load image from artifact 🐳
        run: |
          docker load --input /tmp/spellbook-backend.tar
          docker image ls -a

      - name: Push image to Amazon ECR 📦
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ needs.build.outputs.version }}
        run: |
          docker tag spellbook-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  run-migrations:
    runs-on: ubuntu-latest
    needs: delivery-production
    environment: scm-production
    steps:

      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Configure AWS credentials 🛠
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR 📦
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Config kube 🐙
        working-directory: backend/.kubernetes/migration
        run: aws eks --region us-east-2 update-kubeconfig --name spellbook-prod-cluster --kubeconfig spellbookkubeconfig.yaml

      - name: Install and configure kubectl 🐙
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
              --progress-bar \
              --location \
              --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup Kustomize 🛠
        uses: imranismail/setup-kustomize@v2

      - name: Run Kustomize to set image to sha 🛠
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: backend/.kubernetes/migration
        run: |
          image_name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize edit set image $image_name

      - name: Run migrations 🚶‍♂️
        working-directory: backend/.kubernetes/migration
        run: |
          export KUBECONFIG=spellbookkubeconfig.yaml

          kubectl delete job spellbook-migration -n spellbook || true

          kubectl apply -k .

          kubectl wait --for=condition=complete job/spellbook-migration -n spellbook &
          completion_pid=$!

          kubectl wait --for=condition=failed job/spellbook-migration -n spellbook && exit 1 &
          failure_pid=$!

          exit_code=0

          if wait -n $completion_pid $failure_pid; then
            echo "Job completed successfully"
          else
            echo "Job failed"
            exit_code=1
          fi

          echo "Job logs:"
          kubectl logs job/spellbook-migration -n spellbook

          echo "Deleting job..."
          kubectl delete job/spellbook-migration -n spellbook

          exit $exit_code


  push-ecr-latest:
    runs-on: ubuntu-latest
    needs: run-migrations
    environment: scm-production
    steps:
      - name: SetupDocker Buildx 🐳
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials 🛠
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR 📦
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download image artifact ⬇
        uses: actions/download-artifact@v3
        with:
          name: spellbook-backend
          path: /tmp

      - name: Load image from artifact 🐳
        run: |
          docker load --input /tmp/spellbook-backend.tar
          docker image ls -a

      - name: Push image to Amazon ECR 📦
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker tag spellbook-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  rollout-pods:
    runs-on: ubuntu-latest
    needs: push-ecr-latest
    environment: scm-production
    steps:
      - name: Configure AWS credentials 🛠
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Config kube 🐙
        run: aws eks --region us-east-2 update-kubeconfig --name spellbook-prod-cluster --kubeconfig spellbookkubeconfig.yaml

      - name: Install and configure kubectl 🐙
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
              --progress-bar \
              --location \
              --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Rollout pods 🚀
        run: |
          export KUBECONFIG=spellbookkubeconfig.yaml
          kubectl rollout restart deployment/spellbook-api -n spellbook
